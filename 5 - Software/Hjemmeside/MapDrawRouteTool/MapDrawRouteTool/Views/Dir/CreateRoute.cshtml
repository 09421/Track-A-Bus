@{
    ViewBag.Title = "EditRoute";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

<style type="text/css">
    html {
        height: 100%;
    }

    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #map-canvas {
        height: 100%;
    }
</style>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
<script>
    var map;
    var directionsDisplay;
    var directionsDisplay1;
    var directionsService;
    var stepDisplay;
    var markerArray = [];
    var StartEndMarkers = new Array();
    var directionsDisplayArray = new Array();
    var rendererOptions;



    function ExecuteOnLoad() {//from _layout when loaded
        GetBusRoutesNamesFromDB();
    }

    function initialize() {
        // Instantiate a directions service.
        var featureOpts = [{
            featureType: 'poi',
            stylers: [
                { visibility: 'off' }]
        }
        ];

        //Creates the DirectionsService
        directionsService = new google.maps.DirectionsService();

        // Create a map and center it on Aarhus.
        var Aarhus = new google.maps.LatLng(56.155955, 10.205011);
        var mapOptions = {
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: Aarhus,
            streetViewControl: false,
            styles: featureOpts
        };
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        // Create a renderer for directions and bind it to the map.


        rendererOptions = {
            map: map,
            draggable: true,
            markerOptions: {
                clickable: true
            },
            suppressInfoWindows: true
        };
        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        directionsDisplayArray.push(directionsDisplay);


        //Sets the mapto use the TransitLayer
        var transitLayer = new google.maps.TransitLayer();
        transitLayer.setMap(map);


        //Gets markers and the route, when route created, or dragged
        google.maps.event.addListener(directionsDisplay, 'directions_changed', function () {
            var that = this;
            setTimeout(function () {//we need a short delay
                for (var k in that) {//iterate over all properties
                    if (typeof that[k].markers != 'undefined') {//find the desired property
                        var markers = that[k].markers;
                        waypoints = [];
                        for (var i = 0; i < markers.length; ++i) {//collect the data
                            waypoints.push(markers[i].position);
                            markers[i].setZIndex(1);
                            StartEndMarkers.push(markers[i]);
                        };
                    }
                }
                temp = that.directions.routes;

                for (var i = 0; i < StartEndMarkers.length; i++)

                    google.maps.event.addListener(StartEndMarkers[i], 'click', function (event) {

                        SubRuteMarkers.push(new google.maps.Marker({
                            map: map,
                            draggable: true,
                            position: event.latLng
                        }));

                    });
            }, 100);

        });

        var SubRuteMarkers = new Array();

        //listener for when the marker get a click event
        google.maps.event.addListener(map, 'click', function (event) {
            if (startPoint == null && endPoint == null) //No markers, set first
                startPoint = new google.maps.Marker({
                    map: map,
                    draggable: true,
                    position: event.latLng
                });
            else if (startPoint != null && endPoint == null) {//if 1 markers, set last markers
                endPoint = new google.maps.Marker({
                    map: map,
                    draggable: true,
                    position: event.latLng
                });
                calcRoute(startPoint, endPoint);
                ClearMarkers();
            }//If there is a route, and first marker for a subroute, set last marker for subroute
            else if (startPoint != null && endPoint != null && (SubRuteMarkers.length % 2) == 1) {
                SubRuteMarkers.push(new google.maps.Marker({
                    map: map,
                    draggable: true,
                    position: event.latLng
                }));

                calcSubRoute(SubRuteMarkers);

                for (var k = 0; k < SubRuteMarkers.length; k++) {
                    SubRuteMarkers[k].setMap(null);
                }
                SubRuteMarkers = [];
            }
        });

        GetAllStops();//Download list of all stops
    }

    //Removes markers from the map, use the premade directions markers instead
    function ClearMarkers() {
        startPoint.setMap(null);
        endPoint.setMap(null);
    }

    var startPoint;
    var endPoint;
    var SubRouteWaypoints = new Array();
    var SubRouteArray = new Array();

    function calcSubRoute(markers) {
        dd = new google.maps.DirectionsRenderer(rendererOptions);
        directionsDisplayArray.push(dd);

        google.maps.event.addListener(dd, 'directions_changed', function () {
            var that = this;
            for (var i = 0; i < directionsDisplayArray.length; i++) {
                if (directionsDisplayArray[i] == that) {
                    SubRouteArray[i] = that;
                    setTimeout(function () {
                        for (var k in that) {
                            if (typeof that[k].markers != 'undefined') {

                                var subroutemark = [];
                                var wayMarkers = that[k].markers; 
                                for (var j = 0; j < wayMarkers.length; ++j) {
                                    subroutemark.push(wayMarkers[j].position);
                                };
                                SubRouteWaypoints[i - 2] = subroutemark;
                            }
                        }
                    }, 100);

                }

            }
        });

        request = {
            origin: markers[0].position,
            destination: markers[1].position,
            travelMode: google.maps.TravelMode.DRIVING
        };


        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                route = response.routes[0];

                directionsDisplayArray[directionsDisplayArray.length - 1].setDirections(response);
            }
        });


    }

    function calcRoute(start, end) {//Get the directions from a startMarker, to the end marker
                                    //using the google directions service API
        request = {
            origin: start.position,
            destination: end.position,
            travelMode: google.maps.TravelMode.DRIVING
        };
        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                route = response.routes[0];
                directionsDisplayArray[0].setDirections(response);

            }
        });
    }

    //Get the list of steps, used to draw the route
    function getRoutePath() {
        DirectionsArray = [];
        if (temp != null) {
            temp.forEach(function (t) {
                t.legs.forEach(function (leg) {
                    leg.steps.forEach(function (step) {
                        step.path.forEach(function (path) {
                            DirectionsArray.push(path);
                        });
                    });
                });
            });
        }

        return DirectionsArray;
    }


    function SetRouteOnMap(route) {
        var start = new google.maps.LatLng(route[0].Lat, route[0].Lng, false);
        var end = new google.maps.LatLng(route[route.length - 1].Lat, route[route.length - 1].Lng, false);
        var routeWaypoints = new Array();
        route.pop();
        route.shift();
        for (var i = 0; i < route.length; i++) {
            routeWaypoints.push({
                location: new google.maps.LatLng(route[i].Lat, route[i].Lng, false),
                stopover: true
            });
        }

        request = {
            origin: start,
            destination: end,
            waypoints: routeWaypoints,
            travelMode: google.maps.TravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {

                var dd = new google.maps.DirectionsRenderer(rendererOptions);
                if (directionsDisplayArray.length == 1) {
                    directionsDisplayArray[0].setDirections(response);
                    directionsDisplayArray.push(dd);
                }
                else {
                    directionsDisplayArray[directionsDisplayArray.length-1].setDirections(response);
                }

                google.maps.event.addListener(dd, 'directions_changed', function () {
                    var that = this;
                    for (var i = 0; i < directionsDisplayArray.length; i++) {
                        if (directionsDisplayArray[i] == that) {
                            SubRouteArray[i] = that;
                            setTimeout(function () {
                                for (var k in that) {
                                    if (typeof that[k].markers != 'undefined') {
                                        var subroutemark = [];
                                        var wayMarkers = that[k].markers;
                                        for (var j = 0; j < wayMarkers.length; ++j) {
                                            subroutemark.push(wayMarkers[j].position);
                                        };
                                        SubRouteWaypoints[i - 2] = subroutemark;
                                    }
                                }
                            }, 100);

                        }

                    }
                });


            }
        });
    }

    function GetRoute(name) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetSelectedBusRoute", "Dir")',
            dataType: "json",
            traditional: true,
            data: {
                RouteName: name.options[name.selectedIndex].value,
                contentType: "application/json; charset=utf-8"
            },
            success: function (result) {
                var ID = result[0].ID;
                var test = new Array();
                var mapSet;
                for(var i = 0; i<result.length; i++){
                    if (result[i].ID == ID) {
                        test.push(result[i]);
                        mapSet = false;
                    }
                    else {
                        SetRouteOnMap(test);
                        ID = result[i].ID;
                        test = [];
                        test.push(result[i])
                        mapSet = true;
                    }                
                }
                if (mapSet == false) {
                    SetRouteOnMap(test);
                }
                    
            }
        });
    }

    //Deletes the selected route from the database, all routepoints for the route, and waypoints
    function DeleteChosenRoute() {
        var selection = document.getElementById("SelRoutes");
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteSelectedBusRoute", "Dir")',
            dataType: "json",
            traditional: true,
            data: {
                RouteName: selection.options[selection.selectedIndex].value,
                contentType: "application/json; charset=utf-8"
            },
            success: function (result) {
                if (result == -1)
                    alert("There are busses on the chosen route, please delete them first");
                else if (result == -2)
                    alert("This should not happen");
                else if (result == 42)
                    alert("Delete success");
                else
                    alert("WHAT DID YOU DO?!");
            }
        });
    }

    //Get the names for all the route in the database
    function GetBusRoutesNamesFromDB() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetBusRoutesNames", "Dir")',
            dataType: "json",
            success: function (result) {
                var selectRoutes = document.getElementById("SelRoutes");
                for (var i = 0; i < result.length; i++) {
                    selectRoutes.options.add(new Option(result[i], result[i]));
                }
            }
        });
    }

    //saves the route, and all its stops
    function SaveRouteAndStops() {
        if (document.getElementById("RouteNumber").value != "") {
            if (DirectionsArray != null) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Save", "Dir")',
                    dataType: "json",
                    traditional: true,
                    data: {
                        route: getRoutePath(),
                        routeWayPoints: waypoints,
                        stops: arrTo,
                        SubRoutes: SplitRoute(SubRouteArray),
                        SubrouteWaypoint: SubRouteWaypoints,
                        RouteNumber: document.getElementById("RouteNumber").value,
                        contentType: "application/json; charset=utf-8"
                    },
                    Success: function () {
                        alert("Save Done");
                    }
                });
            }
        }
        else
            alert("Please Type in a route number");
    }


    //Gets a list of all the stops in the system
    function GetAllStops() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetStops", "Dir")',
            dataType: "json",
            success: function (result) {
                var select = document.combo_box.FromLB;
                select.options.length = 0;
                for (var i = 0; i < result.length; i++) {
                    select.options.add(new Option(result[i].name, result[i].ID));
                }
            }
        });
    }

    //Inserts the selected markers, as stops, unto the map
    function CreateRoute() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetLatLng", "Dir")',
            dataType: "json",
            traditional: true,
            data: {
                StopNames: arrTo,
                contentType: "application/json; charset=utf-8"
            },
            success: function (result) {

                if (MarkerArray.length != 0)
                    MarkerArray = [];

                for (var i = 0; i < result.length; i++) {
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(result[i].Lat, result[i].Lng),
                        map: map
                    });

                    MarkerArray.push(new google.maps.LatLng(result[i].Lat, result[i].Lng));
                }
            }
        });
    }

    //function used to move items between the 2 lists selectors
    function move(tbFrom, tbTo) {
        arrFrom = new Array();
        arrTo = new Array();
        arrLU = new Array();
        var i;
        for (i = 0; i < tbTo.options.length; i++) {
            arrLU[tbTo.options[i].text] = tbTo.options[i].value;
            arrTo[i] = tbTo.options[i].text;
        }
        var fLength = 0;
        var tLength = arrTo.length;
        for (i = 0; i < tbFrom.options.length; i++) {
            arrLU[tbFrom.options[i].text] = tbFrom.options[i].value;
            if (tbFrom.options[i].selected && tbFrom.options[i].value != "") {
                arrTo[tLength] = tbFrom.options[i].text;
                tLength++;
            }
            else {
                arrFrom[fLength] = tbFrom.options[i].text;
                fLength++;
            }
        }

        tbFrom.length = 0;
        tbTo.length = 0;
        var ii;

        for (ii = 0; ii < arrFrom.length; ii++) {
            var no = new Option();
            no.value = arrLU[arrFrom[ii]];
            no.text = arrFrom[ii];
            tbFrom[ii] = no;
        }

        for (ii = 0; ii < arrTo.length; ii++) {
            var no = new Option();
            no.value = arrLU[arrTo[ii]];
            no.text = arrTo[ii];
            tbTo[ii] = no;
        }
    }

    //Get the steps, for all the subroutes
    function SplitRoute(routes) {
        var allPoint = new Array();
        for (var i = 0; i < routes.length; i++) {
            if (routes[i] != null) {
                var DirectionsSplitArray = [];
                if (routes != null) {
                    routes[i].directions.routes.forEach(function (t) {
                        t.legs.forEach(function (leg) {
                            leg.steps.forEach(function (step) {
                                step.path.forEach(function (path) {
                                    DirectionsSplitArray.push(path);
                                });
                            });
                        });
                    });
                }
                allPoint.push(DirectionsSplitArray);
            }
        }
        return allPoint;
    }


    var waypoints = new Array();
    var MarkerArray = new Array();
    var route = null;
    var temp;
    var DirectionsArray = new Array();
    var arrFrom = new Array();
    var arrTo = new Array();
    var arrLU = new Array();
    google.maps.event.addDomListener(window, 'load', initialize);//is needed to show the map on the page
</script>

<div>
    <p style="margin: 10px; height: 100%; width: 100%" class="site-title">Bus route editor</p>
</div>

<section style="float: right; width: 45%; height: 70%; text-align: right; border: groove; margin: 10px;">
    <form name="combo_box">
        <input type="text" id="RouteNumber" name="route name" style="float: left" />
        <table>
            <tr>
                <td>
                    <select multiple size="10" name="FromLB" style="width: 150px;">
                    </select>
                </td>
                <td>
                    <input type="button" onclick="move(this.form.FromLB, this.form.ToLB)"
                        value="->"><br />
                    <input type="button" onclick="move(this.form.ToLB, this.form.FromLB)"
                        value="<-">
                </td>
                <td>
                    <select multiple size="10" name="ToLB" style="width: 150px">
                    </select>
                </td>
            </tr>
            <tr>
                <td>
                    <input id="AddStops" type="button" value="Set bus stops" onclick="CreateRoute();" style="width: auto;" />

                </td>
                <td>
                    <input id="SaveRoute" type="button" value="Save route" onclick="SaveRouteAndStops();" style="width: auto;" />
                </td>
            </tr>
            <tr>
                <td>
                    <select size="10" name="Routes" id="SelRoutes" style="width: 150px;" onchange="GetRoute(this);">
                    </select>
                </td>
            </tr>
            <tr>
                <td>
                    <input id="DeleteRoute" type="button" value="Delete route" onclick="DeleteChosenRoute();" style="width: auto;" />
                </td>
            </tr>
        </table>
    </form>
</section>

<section style="float: left; width: 50%; height: 70%; text-align: left; border: groove; margin: 10px;">
    <div id="map-canvas"></div>
</section>


