<!DOCTYPE html>

@model dynamic
@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html>
<head>
    <title></title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
        html {
            height: 100%;
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map-canvas {
            height: 100%;
        }
    </style>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script>
        var map;
        var directionsDisplay;
        var directionsService;
        var stepDisplay;
        var markerArray = [];

        function initialize() {
            // Instantiate a directions service.

            var featureOpts = [{
                featureType: 'poi',
                stylers: [
                    { visibility: 'off' }]
            }
            ];

            //Creates the DirectionsService
            directionsService = new google.maps.DirectionsService();

            // Create a map and center it on Aarhus.
            var Aarhus = new google.maps.LatLng(56.155955, 10.205011);
            var mapOptions = {
                zoom: 13,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: Aarhus,
                streetViewControl: false,
                styles: featureOpts
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

            // Create a renderer for directions and bind it to the map.
            var rendererOptions = {
                map: map,
                draggable: true
            };
            directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

            //Sets the mapto use the TransitLayer
            var transitLayer = new google.maps.TransitLayer();
            transitLayer.setMap(map);


            google.maps.event.addListener(directionsDisplay, 'directions_changed', function () {
                var that = this;
                setTimeout(function () {//we need a short delay
                    for (var k in that) {//iterate over all properties
                        if (typeof that[k].markers != 'undefined') {//find the desired property
                            var markers = that[k].markers, arr = [];
                            for (var i = 0; i < markers.length; ++i) {//collect the data
                                arr.push(markers[i].position);
                            };
                        }
                    }
                    temp = that.directions.routes;
                }, 100)
            });
            google.maps.event.addListener(map, 'click', function (event) {
                if (startPoint.length == endPoint.length)
                    startPoint.push(new google.maps.Marker({
                        map: map,
                        draggable: true,
                        position: event.latLng
                    }));
                else {
                    endPoint.push(new google.maps.Marker({
                        map: map,
                        draggable: true,
                        position: event.latLng
                    }));
                    calcRoute();
                    ClearMarkers();
                }
            });

            GetAllStops();
        }

        function ClearMarkers() {
            for (var i = 0; i < startPoint.length; i++)
                startPoint[i].setMap(null);

            for (var i = 0; i < endPoint.length; i++)
                endPoint[i].setMap(null);
        }

        var startPoint = [];
        var endPoint = [];

        function calcRoute() {
            var start = startPoint[startPoint.length - 1].position;
            var end = endPoint[endPoint.length - 1].position;

            request = {
                origin: start,
                destination: end,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    route = response.routes[0];
                    directionsDisplay.setDirections(response);
                }
            });
        }

        function calcRouteWithWayPoints(ar) {
            var start = startPoint[startPoint.length - 1].position;
            var end = endPoint[endPoint.length - 1].position;
            var wayp = ar;
            request = {
                origin: start,
                destination: end,
                waypoints: wayp,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    route = response.routes[0];
                    directionsDisplay.setDirections(response);
                }
            });
        }

        function getRoutePath() {
            DirectionsArray = [];
            if (temp != null) {
                temp.forEach(function (t) {
                    t.legs.forEach(function (leg) {
                        leg.steps.forEach(function (step) {
                            step.path.forEach(function (path) {
                                DirectionsArray.push(path);
                            });
                        });
                    });
                });
            }
            return DirectionsArray;
        }

        function SaveRouteAndStops() {
            if (DirectionsArray != null) {  
                $.ajax({
                    type: "POST",
                    url: "Dir/Save",
                    dataType: "json",
                    traditional: true,
                    data: {
                        route: getRoutePath(),
                        stops: arrTo,
                        contentType: "application/json; charset=utf-8"
                    }
                });
            }
        }

        function GetAllStops() {
            $.ajax({
                type: "GET",
                url: "Dir/GetStops",
                dataType: "json",
                success: function (result) {
                    var select = document.combo_box.FromLB;
                    select.options.length = 0;
                    for (var i = 0; i < result.length; i++) {
                        select.options.add(new Option(result[i].name, result[i].ID));
                    }
                }
            });
        }

        function CreateRoute() {
            $.ajax({
                type: "POST",
                url: "Dir/GetLatLng",
                dataType: "json",
                traditional: true,
                data: {
                    StopNames: arrTo,
                    contentType: "application/json; charset=utf-8"
                },
                success: function (result) {

                    if (MarkerArray.length != 0)
                        MarkerArray = [];

                    for (var i = 0; i < result.length; i++) {
                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(result[i].Lat, result[i].Lng),
                            map: map
                        });

                        MarkerArray.push(new google.maps.LatLng(result[i].Lat, result[i].Lng));
                    }
                }
            });
        }

        function move(tbFrom, tbTo) {
            arrFrom = new Array();
            arrTo = new Array();
            arrLU = new Array();
            var i;
            for (i = 0; i < tbTo.options.length; i++) {
                arrLU[tbTo.options[i].text] = tbTo.options[i].value;
                arrTo[i] = tbTo.options[i].text;
            }
            var fLength = 0;
            var tLength = arrTo.length;
            for (i = 0; i < tbFrom.options.length; i++) {
                arrLU[tbFrom.options[i].text] = tbFrom.options[i].value;
                if (tbFrom.options[i].selected && tbFrom.options[i].value != "") {
                    arrTo[tLength] = tbFrom.options[i].text;
                    tLength++;
                }
                else {
                    arrFrom[fLength] = tbFrom.options[i].text;
                    fLength++;
                }
            }

            tbFrom.length = 0;
            tbTo.length = 0;
            var ii;

            for (ii = 0; ii < arrFrom.length; ii++) {
                var no = new Option();
                no.value = arrLU[arrFrom[ii]];
                no.text = arrFrom[ii];
                tbFrom[ii] = no;
            }

            for (ii = 0; ii < arrTo.length; ii++) {
                var no = new Option();
                no.value = arrLU[arrTo[ii]];
                no.text = arrTo[ii];
                tbTo[ii] = no;
            }
        }

        var MarkerArray = new Array();
        var route = null;
        var temp;
        var DirectionsArray = new Array();
        var arrFrom = new Array();
        var arrTo = new Array();
        var arrLU = new Array();
        google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</head>
<body>
    <div style="float: right; width: 30%; height: 100%; text-align: left; padding-top: 10px;">
        <form name="combo_box">
            <table>
                <tr>
                    <td>
                        <select multiple size="15" name="FromLB" style="width: 150">
                        </select>
                    </td>
                    <td align="center" valign="middle">
                        <input type="button" onclick="move(this.form.FromLB, this.form.ToLB)"
                            value="->"><br />
                        <input type="button" onclick="move(this.form.ToLB, this.form.FromLB)"
                            value="<-">
                    </td>
                    <td>
                        <select multiple size="15" name="ToLB" style="width: 150">
                        </select>
                    </td>
                </tr>
            </table>
            <input id="AddStops" type="button" value="Create Route" onclick="CreateRoute();" style="float: left;" />
            <input id="SaveRoute" type="button" value="Save route" onclick="SaveRouteAndStops();" style="float: right;" />
        </form>
    </div>
    <div id="map-canvas" />
</body>
</html>
